// Generated by CoffeeScript 1.4.0
(function() {
  var Server,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Server = {};

  Server.Metagame = (function() {

    function Metagame(id) {
      this.id = id;
      this.gameover = __bind(this.gameover, this);

      this.loadGame = __bind(this.loadGame, this);

      this.start = __bind(this.start, this);

      this.allPlayersReady = __bind(this.allPlayersReady, this);

      this.addPlayer = __bind(this.addPlayer, this);

      this.minigameDoneLoading = __bind(this.minigameDoneLoading, this);

      this.getPlayer = __bind(this.getPlayer, this);

      this.isAcceptingPlayers = __bind(this.isAcceptingPlayers, this);

      this.init = __bind(this.init, this);

      this.getPlayer = __bind(this.getPlayer, this);

    }

    Metagame.prototype.getPlayer = function(id) {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.id === id) {
          return player;
        }
      }
      return null;
    };

    Metagame.prototype.allMinigames = [
      {
        'name': 'TapRace',
        'src': "/assets/minigames/tap_race.js"
      }
    ];

    Metagame.prototype.minigames = [
      {
        'name': 'TapRace',
        'src': "/assets/minigames/tap_race.js"
      }
    ];

    Metagame.prototype.init = function(io) {
      var _this = this;
      console.log("New metagame with id " + this.id);
      this.players = [];
      this.room = io.of("/" + this.id);
      return this.room.on('connection', function(socket) {
        socket.on('players: player joining', _this.addPlayer);
        socket.on('minigame: done loading', _this.minigameDoneLoading);
        return socket.on('minigame: gameover', _this.gameover);
      });
    };

    Metagame.prototype.isAcceptingPlayers = function() {
      return true;
    };

    Metagame.prototype.getPlayer = function(id) {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.id === id) {
          return player;
        }
      }
      return null;
    };

    Metagame.prototype.minigameDoneLoading = function(data) {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.id === data.player.id) {
          player.ready = true;
          break;
        }
      }
      if (this.allPlayersReady()) {
        return this.start();
      }
    };

    Metagame.prototype.addPlayer = function(data) {
      console.log('####################### PLAYER JOINING');
      this.players.push(data.player);
      this.room.emit('players: list updated', this.players);
      if (true) {
        return this.loadGame(0);
      }
    };

    Metagame.prototype.allPlayersReady = function() {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (!player.ready) {
          return false;
        }
      }
      return true;
    };

    Metagame.prototype.start = function() {
      return this.room.emit('minigame: start');
    };

    Metagame.prototype.loadGame = function(index) {
      var player, _i, _len, _ref;
      this.currentMinigame = index;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        player.ready = false;
      }
      return this.room.emit('minigame: load', {
        src: this.minigames[index].src
      });
    };

    Metagame.prototype.gameover = function(data) {
      return this.getPlayer(data.player.id).score = data.score;
    };

    return Metagame;

  })();

  module.exports = Server.Metagame;

}).call(this);
