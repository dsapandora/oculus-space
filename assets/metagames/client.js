// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App.Metagame = (function() {

    Metagame.TEMPLATES = "/assets/metagames/default/templates/templates.js";

    Metagame.STYLESHEET = "/assets/metagames/default/css/metagame.css";

    function Metagame(id) {
      this.id = id;
      this.proxyFetchReturn = __bind(this.proxyFetchReturn, this);

      this.proxyFetch = __bind(this.proxyFetch, this);

      this.receiveBroadcast = __bind(this.receiveBroadcast, this);

      this.playerReady = __bind(this.playerReady, this);

      this.addMinigame = __bind(this.addMinigame, this);

      this.minigameShowInstructions = __bind(this.minigameShowInstructions, this);

      this.minigameLoad = __bind(this.minigameLoad, this);

      this.minigameCountdown = __bind(this.minigameCountdown, this);

      this.showNextGameIntro = __bind(this.showNextGameIntro, this);

      this.showResults = __bind(this.showResults, this);

      this.showScoreboard = __bind(this.showScoreboard, this);

      this.updateScoreboard = __bind(this.updateScoreboard, this);

      this.updateInstructions = __bind(this.updateInstructions, this);

      this.metagameStart = __bind(this.metagameStart, this);

      this.updateWaitingRoom = __bind(this.updateWaitingRoom, this);

      this.init = __bind(this.init, this);

      this.getPlayer = __bind(this.getPlayer, this);

    }

    Metagame.prototype.getPlayer = function(id) {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.id === id) {
          return player;
        }
      }
      return null;
    };

    Metagame.prototype.minigames = [];

    Metagame.prototype.init = function(io, name) {
      var _this = this;
      $('head').append("<link rel='stylesheet' href='" + this.constructor.STYLESHEET + "'>");
      return $.getScript(this.constructor.TEMPLATES).done(function(script, textStatus) {
        console.log("New metagame with id " + _this.id);
        _this.el = $("<div>").addClass('active view').attr("id", "metagame").hide();
        _this.el.html(_.template(App.Metagame.Default.Templates.main_view));
        $('body').append(_this.el);
        $('.active.view').removeClass('active').fadeOut();
        _this.el.fadeIn();
        _this.socket = io.connect("/" + _this.id);
        _this.socket.emit('players: player joining', {
          name: name
        });
        _this.socket.on('players: list updated', function(players) {
          _this.players = players;
          _this.updateWaitingRoom();
          _this.updateInstructions();
          _this.updateScoreboard();
          if (_this.currentMinigame != null) {
            return _this.currentMinigame.playersUpdated();
          }
        });
        _this.socket.on('metagame: start', _this.metagameStart);
        _this.socket.on('minigame: load', _this.minigameLoad);
        _this.socket.on('minigame: start', function() {
          return _this.minigameCountdown();
        });
        _this.socket.on('minigame: gameover', function(players) {
          _this.players = players;
          return _this.showResults();
        });
        _this.socket.on('broadcast', _this.receiveBroadcast);
        return _this.socket.on('proxyFetchReturn', _this.proxyFetchReturn);
      });
    };

    Metagame.prototype.updateWaitingRoom = function() {
      var _this = this;
      this.el.find('#waiting_room').html(_.template(App.Metagame.Default.Templates.waiting_room, {
        players: this.players
      }));
      return this.el.find('#waiting_room button').click(function() {
        if (_this.el.find('#waiting_room button').attr('disabled') !== "disabled") {
          if (_this.players.length < 1) {
            return alert("You need at least two people to play!");
          } else {
            _this.el.find('#waiting_room button').attr('disabled', 'disabled').text("Working...");
            return _this.socket.emit('metagame: start');
          }
        }
      });
    };

    Metagame.prototype.metagameStart = function() {
      this.el.find('#intro').html(_.template(App.Metagame.Default.Templates.intro, {
        players: this.players
      }));
      return this.el.find('#waiting_room').slideUp(500);
    };

    Metagame.prototype.updateInstructions = function() {
      var _this = this;
      if (this.currentMinigame) {
        this.el.find('#pregame').html(_.template(App.Metagame.Default.Templates.pregame, {
          name: this.currentMinigame.constructor.NAME,
          instructions: this.currentMinigame.constructor.INSTRUCTIONS,
          players: this.players,
          ready: this.ready
        }));
        return this.el.find('#pregame button').click(function() {
          if (_this.el.find('#pregame button').attr('disabled') !== "disabled") {
            _this.el.find('#pregame button').attr('disabled', 'disabled').text("Waiting...");
            return _this.playerReady();
          }
        });
      }
    };

    Metagame.prototype.updateScoreboard = function() {
      return this.el.find('#scoreboard').html(_.template(App.Metagame.Default.Templates.scoreboard, {
        players: this.sorted_players
      }));
    };

    Metagame.prototype.showScoreboard = function() {
      this.updateScoreboard();
      return this.el.find('#scoreboard').show();
    };

    Metagame.prototype.showResults = function() {
      var index, player, sorted_player, top, _fn, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2,
        _this = this;
      if (!this.sorted_players) {
        this.sorted_players = this.players;
      }
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        _ref1 = this.sorted_players;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          sorted_player = _ref1[_j];
          if (sorted_player.id === player.id) {
            sorted_player.minigame_score = player.minigame_score;
            break;
          }
        }
      }
      this.updateScoreboard();
      this.el.find('#scoreboard').show();
      setTimeout((function() {
        return _this.showNextGameIntro();
      }), 5500 + (this.players.length * 1000));
      _ref2 = this.sorted_players;
      _fn = function() {
        var score, temp;
        player.score += player.minigame_score;
        temp = $("tr[data-id=" + player.id + "] td.score span");
        score = player.score;
        return setTimeout((function() {
          return temp.text(score);
        }), 3000 + index * 1000);
      };
      for (index = _k = 0, _len2 = _ref2.length; _k < _len2; index = ++_k) {
        player = _ref2[index];
        _fn();
      }
      this.sorted_players = this.players.sort(function(s1, s2) {
        return s1.score <= s2.score;
      });
      top = 60;
      return setTimeout((function() {
        top = 60;
        return $.each(_this.sorted_players, function(index, player) {
          $("#scoreboard tr[data-id=" + player.id + "]").animate({
            position: 'absolute',
            top: top + 'px'
          }, 500);
          return top += 60;
        });
      }), 3500 + (this.players.length * 1000));
    };

    Metagame.prototype.showNextGameIntro = function() {
      var _this = this;
      this.el.find('#next_game').html(_.template(App.Metagame.Default.Templates.next_game, {
        players: this.players,
        currentMinigame: this.currentMinigame
      })).show();
      this.el.find('#scoreboard').slideUp(500);
      return setTimeout((function() {
        return _this.el.find('#pregame').slideDown(500);
      }), 3000);
    };

    Metagame.prototype.minigameCountdown = function() {
      var _this = this;
      console.log("Starting " + this.currentMinigame.constructor.NAME + " in 2 seconds!");
      this.el.find('#countdown').html(_.template(App.Metagame.Default.Templates.countdown), {}).show();
      $('#backgrounds').fadeOut(3000);
      $('#overlay').fadeIn(3000);
      setTimeout((function() {
        return _this.el.find('#countdown span').text("2");
      }), 1000);
      setTimeout((function() {
        return _this.el.find('#countdown span').text("1");
      }), 2000);
      setTimeout((function() {
        return _this.el.fadeOut(500);
      }), 2500);
      setTimeout((function() {
        _this.el.find('#countdown').hide();
        return _this.el.find('#pregame').hide();
      }), 3000);
      return setTimeout(this.currentMinigame.start, 3000);
    };

    Metagame.prototype.minigameLoad = function(data) {
      var _this = this;
      this.el.find(".next_game").text(data.minigame.name);
      this.el.find(".next_game").fadeIn(300);
      console.log("LOADING MINIGAME: " + data.minigame.name);
      this.el.find('#instructions').show();
      if (this.minigames[data.minigame.name]) {
        this.currentMinigame = new this.minigames[data.minigame.name];
        this.currentMinigame.init();
        this.minigameShowInstructions();
        return setTimeout((function() {
          return _this.el.find('#intro').slideUp(500);
        }), 2000);
      } else {
        return $.getScript(data.minigame.src).done(function(script, textStatus) {
          _this.currentMinigame = new _this.minigames[data.minigame.name];
          _this.currentMinigame.init();
          _this.minigameShowInstructions();
          return setTimeout((function() {
            return _this.el.find('#intro').slideUp(500);
          }), 2000);
        });
      }
    };

    Metagame.prototype.minigameShowInstructions = function() {
      return this.updateInstructions();
    };

    Metagame.prototype.addMinigame = function(minigame) {
      return this.minigames[minigame.NAME] = minigame;
    };

    Metagame.prototype.playerReady = function() {
      this.ready = true;
      return this.socket.emit('metagame: player ready');
    };

    Metagame.prototype.gameover = function(score) {
      this.ready = false;
      $('#backgrounds').fadeIn(1000);
      $('#overlay').fadeOut(1000);
      this.socket.emit('minigame: gameover', {
        score: score
      });
      return this.el.fadeIn();
    };

    Metagame.prototype.sendBroadcast = function(event, data) {
      return this.socket.emit('broadcast', {
        _event: event,
        _data: data
      });
    };

    Metagame.prototype.receiveBroadcast = function(data) {
      if (this.currentMinigame != null) {
        return this.currentMinigame.receiveBroadcast(data._event, data._data, data._player_id);
      }
    };

    Metagame.prototype.proxyFetch = function(url) {
      return this.socket.emit('proxyFetch', {
        url: url
      });
    };

    Metagame.prototype.proxyFetchReturn = function(data) {
      console.log(data);
      if (this.currentMinigame != null) {
        return this.currentMinigame.proxyFetchReturn(data);
      }
    };

    return Metagame;

  })();

}).call(this);
