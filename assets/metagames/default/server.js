// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App.Metagames.DefaultServer = (function(_super) {

    __extends(DefaultServer, _super);

    function DefaultServer() {
      this.gameover = __bind(this.gameover, this);

      this.loadFirstGame = __bind(this.loadFirstGame, this);

      this.start = __bind(this.start, this);

      this.allPlayersReady = __bind(this.allPlayersReady, this);

      this.addPlayer = __bind(this.addPlayer, this);

      this.minigameDoneLoading = __bind(this.minigameDoneLoading, this);

      this.getPlayer = __bind(this.getPlayer, this);

      this.isAcceptingPlayers = __bind(this.isAcceptingPlayers, this);

      this.init = __bind(this.init, this);
      return DefaultServer.__super__.constructor.apply(this, arguments);
    }

    DefaultServer.prototype.init = function(io) {
      var _this = this;
      this.players = [];
      this.room = io.of("/" + this.id);
      return this.room.on('connection', function(socket) {
        socket.on('players: player joining', _this.addPlayer);
        socket.on('minigame: done loading', _this.minigameDoneLoading);
        return socket.on('minigame: gameover', _this.gameover);
      });
    };

    DefaultServer.prototype.isAcceptingPlayers = function() {
      return true;
    };

    DefaultServer.prototype.getPlayer = function(id) {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.id === id) {
          return player;
        }
      }
      return null;
    };

    DefaultServer.prototype.minigameDoneLoading = function(data) {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.id === data.player.id) {
          player.ready = true;
          break;
        }
      }
      if (this.allPlayersReady()) {
        return this.start();
      }
    };

    DefaultServer.prototype.addPlayer = function(data) {
      this.players.push(data.player);
      this.room.emit('players: list updated', this.players);
      if (true) {
        console.log('LOADING GAME');
        return this.loadFirstGame();
      }
    };

    DefaultServer.prototype.allPlayersReady = function() {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (!player.ready) {
          return false;
        }
      }
      return true;
    };

    DefaultServer.prototype.start = function() {
      return this.room.emit('minigame: start');
    };

    DefaultServer.prototype.loadFirstGame = function() {
      var player, _i, _len, _ref;
      this.currentMinigame = new App.Minigame;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        player.ready = false;
      }
      return this.room.emit('minigame: load', {
        src: this.currentMinigame.src
      });
    };

    DefaultServer.prototype.gameover = function(data) {
      return this.getPlayer(data.player.id).score = data.score;
    };

    return DefaultServer;

  })(App.Metagames.Default);

}).call(this);
