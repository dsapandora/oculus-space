// Generated by CoffeeScript 1.4.0
(function() {
  var App,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = {
    Metagames: {
      Default: {}
    }
  };

  App.Metagames.Default.Parent = (function() {

    function Parent(id) {
      this.getPlayer = __bind(this.getPlayer, this);

      this.url = __bind(this.url, this);
      this.id || (this.id = Math.random().toString(36).substring(2, 6));
    }

    Parent.prototype.url = function() {
      return "/" + this.id;
    };

    Parent.prototype.getPlayer = function(id) {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.id === id) {
          return player;
        }
      }
      return null;
    };

    Parent.prototype.allMinigames = [
      {
        'name': 'TapRace',
        'src': "/assets/minigames/tap_race.js"
      }
    ];

    Parent.prototype.minigames = [
      {
        'name': 'TapRace',
        'src': "/assets/minigames/tap_race.js"
      }
    ];

    return Parent;

  })();

  App.Metagames.Default.Server = (function(_super) {

    __extends(Server, _super);

    function Server() {
      this.gameover = __bind(this.gameover, this);

      this.loadGame = __bind(this.loadGame, this);

      this.start = __bind(this.start, this);

      this.allPlayersReady = __bind(this.allPlayersReady, this);

      this.addPlayer = __bind(this.addPlayer, this);

      this.minigameDoneLoading = __bind(this.minigameDoneLoading, this);

      this.getPlayer = __bind(this.getPlayer, this);

      this.isAcceptingPlayers = __bind(this.isAcceptingPlayers, this);

      this.init = __bind(this.init, this);
      return Server.__super__.constructor.apply(this, arguments);
    }

    Server.prototype.init = function(io) {
      var _this = this;
      this.players = [];
      this.room = io.of("/" + this.id);
      return this.room.on('connection', function(socket) {
        socket.on('players: player joining', _this.addPlayer);
        socket.on('minigame: done loading', _this.minigameDoneLoading);
        return socket.on('minigame: gameover', _this.gameover);
      });
    };

    Server.prototype.isAcceptingPlayers = function() {
      return true;
    };

    Server.prototype.getPlayer = function(id) {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.id === id) {
          return player;
        }
      }
      return null;
    };

    Server.prototype.minigameDoneLoading = function(data) {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.id === data.player.id) {
          player.ready = true;
          break;
        }
      }
      if (this.allPlayersReady()) {
        return this.start();
      }
    };

    Server.prototype.addPlayer = function(data) {
      this.players.push(data.player);
      this.room.emit('players: list updated', this.players);
      if (true) {
        return this.loadGame(0);
      }
    };

    Server.prototype.allPlayersReady = function() {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (!player.ready) {
          return false;
        }
      }
      return true;
    };

    Server.prototype.start = function() {
      return this.room.emit('minigame: start');
    };

    Server.prototype.loadGame = function(index) {
      var player, _i, _len, _ref;
      this.currentMinigame = index;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        player.ready = false;
      }
      return this.room.emit('minigame: load', {
        src: this.minigames[index].src
      });
    };

    Server.prototype.gameover = function(data) {
      return this.getPlayer(data.player.id).score = data.score;
    };

    return Server;

  })(App.Metagames.Default.Parent);

  App.Metagames.Default.Client = (function(_super) {

    __extends(Client, _super);

    function Client() {
      this.minigameLoad = __bind(this.minigameLoad, this);

      this.drawPlayerList = __bind(this.drawPlayerList, this);
      return Client.__super__.constructor.apply(this, arguments);
    }

    Client.prototype.init = function(io) {
      var _this = this;
      this.el = $("<div>").addClass('active view').attr("id", "metagame");
      $('.active.view').removeClass('active').hide();
      $('body').append(this.el);
      this.socket = io.connect("/" + this.id);
      this.socket.emit('players: player joining', {
        player: App.player
      });
      this.socket.on('players: list updated', function(players) {
        _this.players = players;
        return _this.drawPlayerList();
      });
      this.socket.on('minigame: load', this.minigameLoad);
      return this.socket.on('minigame: start', function() {
        return App.minigames[0].start();
      });
    };

    Client.prototype.drawPlayerList = function() {
      console.log(this);
      console.log(this.players);
      return this.el.html(JSON.stringify(this.players));
    };

    Client.prototype.minigameLoad = function(data) {
      var _this = this;
      return $.getScript(data.src).done(function(script, textStatus) {
        _this.ready = true;
        return _this.socket.emit('minigame: done loading', {
          player: App.player
        });
      });
    };

    Client.prototype.gameover = function(minigame) {
      this.getPlayer(App.player.id).score = minigame.score;
      this.socket.emit('minigame: gameover', {
        player: App.player,
        score: minigame.score
      });
      return this.drawPlayerList();
    };

    return Client;

  })(App.Metagames.Default.Parent);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = App.Metagames.Default;
  } else {
    window.App = App;
  }

}).call(this);
