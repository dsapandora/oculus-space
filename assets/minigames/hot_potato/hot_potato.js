// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App.Minigames.HotPotato = (function(_super) {

    __extends(HotPotato, _super);

    function HotPotato() {
      this.receiveBroadcast = __bind(this.receiveBroadcast, this);

      this.setBombPlayer = __bind(this.setBombPlayer, this);

      this.redrawBomb = __bind(this.redrawBomb, this);

      this.throwBomb = __bind(this.throwBomb, this);

      this.endGame = __bind(this.endGame, this);

      this.updateClock = __bind(this.updateClock, this);

      this.initializeClock = __bind(this.initializeClock, this);

      this.trueStart = __bind(this.trueStart, this);

      this.start = __bind(this.start, this);
      return HotPotato.__super__.constructor.apply(this, arguments);
    }

    HotPotato.NAME = 'HotPotato';

    HotPotato.INSTRUCTIONS = "When the bomb comes to you, flick it towards one of your opponents. Don't get caught holding the bomb!";

    HotPotato.TEMPLATES = "/assets/minigames/hot_potato/templates.js";

    HotPotato.STYLESHEET = "/assets/minigames/hot_potato/styles.css";

    HotPotato.prototype.init = function() {
      HotPotato.__super__.init.apply(this, arguments);
      if (!(App.Templates.HotPotato != null)) {
        $('head').append("<link rel='stylesheet' href='" + this.constructor.STYLESHEET + "'>");
        return $.getScript(this.constructor.TEMPLATES);
      }
    };

    HotPotato.prototype.start = function() {
      var _this = this;
      this.el = $("<div>").attr({
        "id": "hot-potato"
      }).addClass('active view');
      this.el.html(_.template(App.Templates.HotPotato.main_view, {
        players: this.players
      }));
      $('body').append(this.el);
      setTimeout((function() {
        return _this.el.find('.notice').fadeOut(250);
      }), 850);
      return setTimeout((function() {
        return _this.trueStart();
      }), 1000);
    };

    HotPotato.prototype.trueStart = function() {
      var index, player, _i, _len, _ref,
        _this = this;
      this.gameOn = true;
      if (this.players.sort(function(p1, p2) {
        return p1.name.localeCompare(p2.name);
      })[0].id === App.player_id) {
        _ref = this.players;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          player = _ref[_i];
          player.hasBomb = false;
        }
        index = Math.floor(this.players.length * Math.random());
        this.players[index].hasBomb = true;
        this.throwBomb(this.players[index].id);
      }
      this.self = _.find(this.players, function(player) {
        return player.id === App.player_id;
      });
      this.others = _.select(this.players, function(player) {
        return player.id !== App.player_id;
      });
      this.el.find('.person').bind("click", function(e) {
        console.log($(e.currentTarget).data('id'));
        if (_this.self.hasBomb && _this.gameOn) {
          return _this.throwBomb($(e.currentTarget).data('id'));
        }
      });
      this.el.bind("touchstart", function(e) {
        return _this.touchstart = null;
      });
      this.el.bind("touchmove", function(e) {
        if (!_this.touchstart) {
          return _this.touchstart = e.originalEvent;
        } else {
          return _this.touchend = e.originalEvent;
        }
      });
      this.el.bind("touchend", function(e) {
        var diff, end, ratio, start;
        if (_this.self.hasBomb && _this.gameOn && _this.touchstart) {
          start = _this.touchstart.pageX;
          end = _this.touchend.pageX;
          console.log(_this.touchstart);
          console.log(_this.touchend);
          diff = end - start;
          start = _this.touchstart.pageY;
          end = _this.touchend.pageY;
          ratio = (start - end) / diff;
          console.log("diff: " + diff);
          console.log("ratio: " + ratio);
          if (_this.players.length === 1) {
            return;
          } else if (_this.players.length === 2) {
            _this.throwBomb(_this.others[0].id);
          } else if (_this.players.length === 3) {
            if (diff >= 0) {
              _this.throwBomb(_this.others[0].id);
            } else {
              _this.throwBomb(_this.others[1].id);
            }
          } else {
            if (Math.abs(ratio) > 4 || Math.abs(diff) < 50) {
              _this.throwBomb(_this.others[1].id);
            } else if (diff <= 0) {
              _this.throwBomb(_this.others[0].id);
            } else {
              _this.throwBomb(_this.others[2].id);
            }
          }
          _this.touchstart = null;
          return _this.touchend = null;
        }
      });
      this.initializeClock();
      return this.clock = setInterval((function() {
        return _this.updateClock();
      }), 1000);
    };

    HotPotato.prototype.initializeClock = function() {
      return this.el.find('.clock').text('10');
    };

    HotPotato.prototype.updateClock = function() {
      var currentVal;
      currentVal = parseInt(this.el.find('.clock').text());
      if (currentVal <= 1) {
        this.el.find('.clock').text("BOOM");
        clearInterval(this.clock);
        return this.endGame();
      } else {
        if (currentVal <= 5) {
          this.el.find('.clock').css('color', '#f00');
        }
        return this.el.find('.clock').text(currentVal - 1);
      }
    };

    HotPotato.prototype.endGame = function() {
      var _this = this;
      this.gameOn = false;
      this.el.find('.bomb').css({
        background: "#b00"
      });
      setTimeout((function() {
        var loser;
        loser = _.find(_this.players, function(player) {
          return player.hasBomb;
        });
        return _this.el.find('.notice').text("" + loser.name + " lost!").fadeIn();
      }), 1000);
      return setTimeout((function() {
        return _this.gameover();
      }), 3500);
    };

    HotPotato.prototype.throwBomb = function(id) {
      this.broadcast('hot potato: has bomb', {
        id: id
      });
      return console.log('transmitting throw to ' + id);
    };

    HotPotato.prototype.redrawBomb = function() {
      var bomber;
      $('.bomb').removeClass('you player_0 player_1 player_2');
      if (this.self && this.self.hasBomb) {
        return $('.bomb').addClass('you');
      } else {
        bomber = _.find(this.players, function(player) {
          return player.hasBomb;
        });
        if (bomber) {
          return $('.bomb').addClass("player_" + bomber.index);
        }
      }
    };

    HotPotato.prototype.setBombPlayer = function(id) {
      var player, _i, _j, _len, _len1, _ref, _ref1, _results;
      console.log("setting bomb player: " + id);
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        player.hasBomb = false;
      }
      _ref1 = this.players;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        player = _ref1[_j];
        if (player.id === id) {
          _results.push(player.hasBomb = true);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    HotPotato.prototype.gameover = function() {
      $(this.el).fadeOut();
      if (this.self.hasBomb) {
        return App.metagame.gameover(-10);
      } else {
        return App.metagame.gameover(5);
      }
    };

    HotPotato.prototype.receiveBroadcast = function(event, data, player_id) {
      if (player_id != null) {
        if (event === "hot potato: has bomb") {
          console.log("received bomb transfer event");
          this.setBombPlayer(data.id);
          return this.redrawBomb();
        }
      }
    };

    return HotPotato;

  })(App.Minigames.Default);

  App.metagame.addMinigame(App.Minigames.HotPotato);

}).call(this);
