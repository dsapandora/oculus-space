// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App.Minigames.TapRace = (function(_super) {

    __extends(TapRace, _super);

    function TapRace() {
      this.start = __bind(this.start, this);
      return TapRace.__super__.constructor.apply(this, arguments);
    }

    TapRace.NAME = 'TapRace';

    TapRace.INSTRUCTIONS = 'TapRace is a fun game. Click link, plz.';

    TapRace.TEMPLATES = "/assets/minigames/tap_race/templates.js";

    TapRace.STYLESHEET = "/assets/minigames/tap_race/styles.css";

    TapRace.prototype.init = function() {
      var new_player, player, _i, _len, _ref,
        _this = this;
      this.score = 0;
      this.players = [];
      _ref = App.metagame.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        new_player = jQuery.extend(true, {}, player);
        new_player.score = 0;
        this.players.push(new_player);
      }
      $('head').append("<link rel='stylesheet' href='" + this.constructor.STYLESHEET + "'>");
      return $.getScript(this.constructor.TEMPLATES).done(function(script, textStatus) {
        _this.el = $("<div>").attr({
          "id": "tap-race-minigame"
        });
        _this.el.html(_.template(App.Templates.TapRace.main_view));
        return _this.el.find("#tap-race-players").html(_.template(App.Templates.TapRace.players_view, {
          players: _this.players
        }));
      });
    };

    TapRace.prototype.start = function() {
      var _this = this;
      $('body').append(this.el);
      this.el.find(".btn").bind('click', function() {
        _this.score++;
        _this.render();
        return _this.broadcast("updateScore");
      });
      return setTimeout((function() {
        return _this.gameover();
      }), 5000);
    };

    TapRace.prototype.render = function() {
      return $('.score').text(this.score);
    };

    TapRace.prototype.gameover = function() {
      $(this.el).fadeOut();
      return App.metagame.gameover(this);
    };

    TapRace.prototype.broadcast = function(event, data) {
      if (data == null) {
        data = {};
      }
      return App.metagame.sendBroadcast(event, data);
    };

    TapRace.prototype.receiveBroadcast = function(event, data, player_id) {
      var player, _i, _len, _ref, _results;
      if (player_id != null) {
        _ref = this.players;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          player = _ref[_i];
          if (player.id === player_id) {
            player.score++;
            this.el.find("#tap-race-players").html(_.template(App.Templates.TapRace.players_view, {
              players: this.players
            }));
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    return TapRace;

  })(App.Minigames.Default);

  App.metagame.addMinigame(App.Minigames.TapRace);

}).call(this);
