// Generated by CoffeeScript 1.6.3
(function() {
  window.App.init = function() {
    var oculusBridge;
    window.App.viewAngle = -5 / Math.PI;
    window.App.time = Date.now();
    window.App.bodyAngle = 0;
    window.App.bodyAxis = new THREE.Vector3(0, 1, 0);
    window.App.bodyPosition = new THREE.Vector3(100, 15, 100);
    window.App.velocity = new THREE.Vector3();
    App.initScene();
    App.initGeometry();
    App.initLights();
    oculusBridge = new OculusBridge({
      "debug": true,
      "onOrientationUpdate": function(quatValues) {
        var key, quat, quatCam, value, xzVector;
        for (key in quatValues) {
          value = quatValues[key];
          $("#o" + (key.toUpperCase())).text(value.toFixed(2));
        }
        quat = new THREE.Quaternion();
        quat.setFromAxisAngle(App.bodyAxis, App.bodyAngle);
        quatCam = new THREE.Quaternion(quatValues.x, quatValues.y, quatValues.z, quatValues.w);
        quat.multiply(quatCam);
        xzVector = new THREE.Vector3(0, 0, 1);
        xzVector.applyQuaternion(quat);
        return App.camera.quaternion.copy(quat);
      },
      "onConfigUpdate": function(config) {
        return App.riftCam.setHMD(config);
      },
      "onConnect": function() {
        $('#hud .oculus .disconnected').fadeOut(250);
        return $('#hud .oculus .connected').fadeIn(250);
      },
      "onDisconnect": function() {
        $('#hud .oculus .disconnected').fadeIn(250);
        return $('#hud .oculus .connected').fadeOut(250);
      }
    });
    oculusBridge.connect();
    return window.App.riftCam = new THREE.OculusRiftEffect(App.renderer);
  };

  window.App.initScene = function() {
    var aspectRatio, element, mouse, windowHalf;
    window.App.clock = new THREE.Clock();
    mouse = new THREE.Vector2(0, 0);
    windowHalf = new THREE.Vector2(window.innerWidth / 2, window.innerHeight / 2);
    aspectRatio = window.innerWidth / window.innerHeight;
    window.App.scene = new THREE.Scene();
    window.App.camera = new THREE.PerspectiveCamera(45, aspectRatio, 1, 10000);
    App.camera.useQuaternion = true;
    App.camera.position.set(100, 15, 100);
    App.camera.lookAt(App.scene.position);
    window.App.renderer = new THREE.WebGLRenderer({
      antialias: true
    });
    App.renderer.setClearColor(0x000000);
    App.renderer.setSize(window.innerWidth, window.innerHeight);
    App.scene.fog = new THREE.Fog(0x000000, 300, 700);
    element = document.getElementById('viewport');
    element.appendChild(App.renderer.domElement);
    return window.App.controls = new THREE.SpaceControls(App.camera);
  };

  window.App.initLights = function() {
    var ambient;
    ambient = new THREE.AmbientLight(0x222222);
    App.scene.add(ambient);
    window.App.headlights = new THREE.PointLight(0xffffff, 0.4, 500);
    App.headlights.position.set(0, 0, 0);
    return App.scene.add(App.headlights);
  };

  window.App.initGeometry = function() {
    var box, boxTexture, floor, floorGeometry, floorMaterial, floorTexture, height, i, material, width, _i;
    floorTexture = new THREE.ImageUtils.loadTexture("/assets/textures/tile.jpg");
    floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;
    floorTexture.repeat.set(50, 50);
    floorTexture.anisotropy = 32;
    floorMaterial = new THREE.MeshLambertMaterial({
      map: floorTexture,
      transparent: true,
      opacity: 0.60
    });
    floorGeometry = new THREE.PlaneGeometry(1000, 1000, 10, 10);
    floor = new THREE.Mesh(floorGeometry, floorMaterial);
    floor.rotation.x = -Math.PI / 2;
    App.scene.add(floor);
    window.App.boxes = [];
    boxTexture = new THREE.ImageUtils.loadTexture("/assets/textures/blue_blue.jpg");
    for (i = _i = 0; _i <= 200; i = ++_i) {
      material = new THREE.MeshLambertMaterial({
        emissive: 0x000000,
        map: boxTexture,
        color: 0xffffff
      });
      height = Math.random() * 150 + 10;
      width = Math.random() * 20 + 2;
      box = new THREE.Mesh(new THREE.CubeGeometry(width, height, width), material);
      box.position.set(Math.random() * 1000 - 500, height / 2, Math.random() * 1000 - 500);
      box.rotation.set(0, Math.random() * Math.PI * 2, 0);
      App.boxes.push(box);
      App.scene.add(box);
    }
    material = new THREE.MeshLambertMaterial({
      color: 0x990000
    });
    window.App.ship = new THREE.Mesh(new THREE.CubeGeometry(1, 1, 1), material);
    App.ship.rotation.set(Math.PI / 4, Math.PI / 4, Math.PI / 4);
    App.ship.position.set(0, 0, 0);
    return App.scene.add(App.ship);
  };

  window.App.updateInput = function(delta) {
    var step, turn_speed;
    step = 25 * delta;
    turn_speed = (2 * delta) * Math.PI / 180;
    App.bodyPosition.x += Math.cos(App.bodyAngle) * step;
    App.bodyPosition.z -= Math.sin(App.bodyAngle) * step;
    if (App.data.cY) {
      App.bodyAngle -= App.data.cY * turn_speed;
    }
    if (App.useRift) {
      App.camera.position.set(App.bodyPosition.x, App.bodyPosition.y, App.bodyPosition.z);
      App.ship.position.set(App.bodyPosition.x + Math.cos(App.bodyAngle) * 10, App.bodyPosition.y, App.bodyPosition.z - Math.sin(App.bodyAngle) * 10);
      return App.headlights.position.set(App.bodyPosition.x, App.bodyPosition.y, App.bodyPosition.z);
    }
  };

  window.App.animate = function() {
    var delta;
    delta = App.clock.getDelta();
    App.time += delta;
    App.updateInput(delta);
    App.ship.rotation.x += delta * 1.0;
    App.ship.rotation.y -= delta * 1.33;
    App.ship.rotation.z += delta * 0.57;
    requestAnimationFrame(App.animate);
    if (App.useRift) {
      return App.riftCam.render(App.scene, App.camera);
    } else {
      return App.renderer.render(App.scene, App.camera);
    }
  };

  window.onload = function() {
    App.init();
    return App.animate();
  };

}).call(this);
