// Generated by CoffeeScript 1.4.0
(function() {
  var App,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = {};

  App.metagames = [];

  App.players = [];

  App.minigames = [];

  App.Metagame = (function() {

    function Metagame() {
      this.minigameLoad = __bind(this.minigameLoad, this);

      this.drawPlayerList = __bind(this.drawPlayerList, this);

      this.loadFirstGame = __bind(this.loadFirstGame, this);

      this.start = __bind(this.start, this);

      this.allPlayersReady = __bind(this.allPlayersReady, this);

      this.addPlayer = __bind(this.addPlayer, this);

      this.minigameDoneLoading = __bind(this.minigameDoneLoading, this);

      this.getPlayer = __bind(this.getPlayer, this);

      this.gameover = __bind(this.gameover, this);

      this.serverInit = __bind(this.serverInit, this);

      this.isAcceptingPlayers = __bind(this.isAcceptingPlayers, this);

      this.url = __bind(this.url, this);
      this.id = 1;
    }

    Metagame.prototype.url = function() {
      return "/" + this.id;
    };

    Metagame.prototype.isAcceptingPlayers = function() {
      return true;
    };

    Metagame.prototype.serverInit = function(io) {
      var _this = this;
      this.players = [];
      this.room = io.of("/" + this.id);
      return this.room.on('connection', function(socket) {
        socket.on('players: player joining', _this.addPlayer);
        socket.on('minigame: done loading', _this.minigameDoneLoading);
        return socket.on('minigame: gameover', _this.gameover);
      });
    };

    Metagame.prototype.gameover = function(data) {
      return this.getPlayer(data.player.id).score = data.score;
    };

    Metagame.prototype.getPlayer = function(id) {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.id === id) {
          return player;
        }
      }
      return null;
    };

    Metagame.prototype.minigameDoneLoading = function(data) {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.id === data.player.id) {
          player.ready = true;
          break;
        }
      }
      if (this.allPlayersReady()) {
        return this.start();
      }
    };

    Metagame.prototype.addPlayer = function(data) {
      this.players.push(data.player);
      this.room.emit('players: list updated', this.players);
      if (true) {
        console.log('LOADING GAME');
        return this.loadFirstGame();
      }
    };

    Metagame.prototype.allPlayersReady = function() {
      var player, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (!player.ready) {
          return false;
        }
      }
      return true;
    };

    Metagame.prototype.start = function() {
      return this.room.emit('minigame: start');
    };

    Metagame.prototype.loadFirstGame = function() {
      var player, _i, _len, _ref;
      this.currentMinigame = new App.Minigame;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        player.ready = false;
      }
      return this.room.emit('minigame: load', {
        src: this.currentMinigame.src
      });
    };

    Metagame.prototype.clientInit = function(io) {
      var _this = this;
      this.el = $("<div>").addClass('active view').attr("id", "metagame").text("test");
      $('.active.view').removeClass('active');
      $('body').append(this.el);
      App.Utilities.resizeViewport();
      this.socket = io.connect("/" + this.id);
      this.socket.emit('players: player joining', {
        player: App.player
      });
      this.socket.on('players: list updated', function(players) {
        _this.players = players;
        return _this.drawPlayerList();
      });
      this.socket.on('minigame: load', this.minigameLoad);
      return this.socket.on('minigame: start', function() {
        return App.minigames[0].start();
      });
    };

    Metagame.prototype.drawPlayerList = function() {
      console.log(this);
      console.log(this.players);
      return this.el.html(JSON.stringify(this.players));
    };

    Metagame.prototype.minigameLoad = function(data) {
      var _this = this;
      return $.getScript(data.src).done(function(script, textStatus) {
        _this.ready = true;
        return _this.socket.emit('minigame: done loading', {
          player: App.player
        });
      });
    };

    Metagame.prototype.clientGameover = function(minigame) {
      this.getPlayer(App.player.id).score = minigame.score;
      this.socket.emit('minigame: gameover', {
        player: App.player,
        score: minigame.score
      });
      return this.drawPlayerList();
    };

    return Metagame;

  })();

  App.Player = (function() {

    function Player(name) {
      this.name = name;
      this.id = Math.random().toString(36).substring(2, 8);
    }

    return Player;

  })();

  App.Minigame = (function() {

    function Minigame() {
      this.start = __bind(this.start, this);
      console.log('inserting minigame');
      this.id = Math.random().toString(36).substring(2, 8);
    }

    Minigame.prototype.src = "/assets/minigames/default.js";

    Minigame.prototype.start = function() {
      return console.log('start me!');
    };

    return Minigame;

  })();

  App.Utilities = {
    resizeViewport: function() {
      var view, viewSize, viewport, windowSize;
      windowSize = {
        width: $(window).width(),
        height: $(window).height()
      };
      view = $('body > div.view.active');
      if (view.length === 0) {
        return;
      }
      viewSize = {
        width: view.width(),
        height: view.height()
      };
      view.css({
        position: 'absolute',
        top: '50%',
        left: '50%',
        marginTop: "-" + (viewSize.height / 2) + "px",
        marginLeft: "-" + (viewSize.width / 2) + "px"
      });
      windowSize.ratio = windowSize.width * 1.0 / windowSize.height;
      viewSize.ratio = viewSize.width * 1.0 / viewSize.height;
      viewport = document.querySelector("meta[name=viewport]");
      if (viewSize.ratio < windowSize.ratio) {
        return viewport.setAttribute('content', 'width=' + (viewSize.height * windowSize.ratio) + ', user-scalable=0');
      } else {
        return viewport.setAttribute('content', 'width=' + viewSize.width + ', user-scalable=0');
      }
    }
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = App;
  } else {
    window.App = App;
  }

}).call(this);
